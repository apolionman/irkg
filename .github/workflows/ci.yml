# name: Deploy to Local

# on:
#   push:
#     branches:
#       - main  # Trigger on push to the main branch

# jobs:
#   deploy_to_local:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Check out code
#         uses: actions/checkout@v3

#       - name: Set up SSH key
#         uses: webfactory/ssh-agent@v0.5.3
#         with:
#           ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

#       - name: Check SSH connection
#         run: |
#           echo "Checking SSH connection"
#           ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 20265 dgx@1.tcp.in.ngrok.io "echo 'SSH connection successful'"

#       - name: Pull latest changes, install dependencies, and restart app
#         run: |
#           echo "Pulling latest changes"
#           ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o BatchMode=yes -p 20265 dgx@1.tcp.in.ngrok.io << 'EOF'
#             cd /home/dgx/dgx_irkg_be
#             git status  # Check current status
#             git fetch --all  # Fetch latest updates
#             git reset --hard origin/main  # Force sync with the latest code
#             git pull origin main  # Pull latest changes
            
#             # Install new pip packages
#             source venv/bin/activate  # Activate virtual environment (if using one)
#             pip install --no-cache-dir -r requirements.txt
            
#             # Restart application (modify this based on your setup)
#             ./cleanup_uvicorn.sh
#           EOF

#     environment:
#       name: development


##### OLD PUSH W/OUT RUNNER ####

# name: Deploy to Local

# on:
#   push:
#     branches:
#       - main  # Trigger on push to the main branch

# jobs:
#   deploy_to_local:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Check out code
#         uses: actions/checkout@v3

#       - name: Set up SSH key
#         uses: webfactory/ssh-agent@v0.5.3
#         with:
#           ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

#       - name: Check SSH connection
#         run: |
#           echo "Checking SSH connection"
#           ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 20265 dgx@1.tcp.in.ngrok.io "echo 'SSH connection successful'"

#       - name: Pull latest changes, install dependencies, and restart app
#         run: |
#           echo "Pulling latest changes"
#           ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o BatchMode=yes -p 20265 dgx@1.tcp.in.ngrok.io << 'EOF'
#             cd /home/dgx/dgx_irkg_be
#             git status  # Check current status
#             git fetch --all  # Fetch latest updates
#             git reset --hard origin/main  # Force sync with the latest code
#             git pull origin main  # Pull latest changes
            
#             # Install new pip packages
#             source venv/bin/activate  # Activate virtual environment (if using one)
#             pip install --no-cache-dir -r requirements.txt

#             # Generate a timestamp
#             TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")

#             # Migrate new changes in model
#             alembic revision --autogenerate -m "Migration on $TIMESTAMP"

#             # Apply the migration
#             alembic upgrade head
            
#             # Run migrations (Add this step for your DB migration)
#             alembic upgrade head  # If you're using Alembic for migrations
            
#             # Restart application (modify this based on your setup)
#             # ./cleanup_uvicorn.sh
#           EOF

#     environment:
#       name: development

### NEW PUSH WITH RUNNER """"

name: Deploy to Local

on:
  push:
    branches:
      - main

jobs:
  deploy_to_local:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [mas-dgx-s2, tt-runs]

    steps:
      - name: Checkout latest code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t irkg:dev .

      - name: Stop and Delete previous container
        run: |
          docker stop irkg || true
          docker rm irkg || true

      - name: Run Docker container
        env:
          SECRET_KEY: ${{ vars.SECRET_KEY }}
          API_KEY: ${{ vars.API_KEY }}
          OPENAI_API_KEY: ${{ vars.OPENAI_API_KEY }}
          DATABASE_URL: ${{ vars.DATABASE_URL }}
        run: |
          docker run -d \
            --network irkg_net \
            -v "/home/dev_admin/dgx_irkg_be/TxGNN:/app/TxGNN" \
            -v "/home/dev_admin/dgx_irkg_be/feedback:/app/feedback" \
            -e SECRET_KEY="$SECRET_KEY" \
            -e API_KEY="$API_KEY" \
            -e OPENAI_API_KEY="$OPENAI_API_KEY" \
            -e DATABASE_URL="$DATABASE_URL" \
            -p 8001:8000 \
            --name irkg \
            irkg:dev

    environment:
      name: development

