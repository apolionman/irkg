[
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "xml.etree.ElementTree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "aiofiles",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiofiles",
        "description": "aiofiles",
        "detail": "aiofiles",
        "documentation": {}
    },
    {
        "label": "run_orffinder",
        "importPath": "ORFfinder",
        "description": "ORFfinder",
        "isExtraImport": true,
        "detail": "ORFfinder",
        "documentation": {}
    },
    {
        "label": "parse_orf_result",
        "importPath": "ORFfinder",
        "description": "ORFfinder",
        "isExtraImport": true,
        "detail": "ORFfinder",
        "documentation": {}
    },
    {
        "label": "fetch_clinvar_variations",
        "importPath": "clinvar_query_v1",
        "description": "clinvar_query_v1",
        "isExtraImport": true,
        "detail": "clinvar_query_v1",
        "documentation": {}
    },
    {
        "label": "fetch_fasta",
        "importPath": "clinvar_query_v1",
        "description": "clinvar_query_v1",
        "isExtraImport": true,
        "detail": "clinvar_query_v1",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "txgnn_query",
        "importPath": "txgnn_query",
        "description": "txgnn_query",
        "isExtraImport": true,
        "detail": "txgnn_query",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "fuzz",
        "importPath": "fuzzywuzzy",
        "description": "fuzzywuzzy",
        "isExtraImport": true,
        "detail": "fuzzywuzzy",
        "documentation": {}
    },
    {
        "label": "process",
        "importPath": "fuzzywuzzy",
        "description": "fuzzywuzzy",
        "isExtraImport": true,
        "detail": "fuzzywuzzy",
        "documentation": {}
    },
    {
        "label": "TxData",
        "importPath": "txgnn",
        "description": "txgnn",
        "isExtraImport": true,
        "detail": "txgnn",
        "documentation": {}
    },
    {
        "label": "TxGNN",
        "importPath": "txgnn",
        "description": "txgnn",
        "isExtraImport": true,
        "detail": "txgnn",
        "documentation": {}
    },
    {
        "label": "TxEval",
        "importPath": "txgnn",
        "description": "txgnn",
        "isExtraImport": true,
        "detail": "txgnn",
        "documentation": {}
    },
    {
        "label": "parse_orf_result",
        "kind": 2,
        "importPath": "ORFfinder",
        "description": "ORFfinder",
        "peekOfCode": "def parse_orf_result(output: str):\n    \"\"\"\n    Parses the ORFfinder output into a structured dictionary format.\n    \"\"\"\n    orfs = []\n    lines = output.strip().split(\"\\n\")\n    current_orf = {}\n    sequence = []\n    for line in lines:\n        if line.startswith(\">lcl|\"):",
        "detail": "ORFfinder",
        "documentation": {}
    },
    {
        "label": "run_orffinder",
        "kind": 2,
        "importPath": "ORFfinder",
        "description": "ORFfinder",
        "peekOfCode": "def run_orffinder(input_file: str, output_file: str, minimal_length: int = 75, start_codon: int = 1):\n    \"\"\"\n    This function runs the ORFfinder command-line tool with the given parameters.\n    \"\"\"\n    command = [\n        \"./ORFfinder\", \"-in\", input_file, \"-out\", output_file, \"-ml\", str(minimal_length), \"-s\", str(start_codon)\n    ]\n    try:\n        # Run the ORFfinder command\n        subprocess.run(command, check=True)",
        "detail": "ORFfinder",
        "documentation": {}
    },
    {
        "label": "fetch_clinvar_variations",
        "kind": 2,
        "importPath": "clinvar_query",
        "description": "clinvar_query",
        "peekOfCode": "def fetch_clinvar_variations(gene_name: str):\n    # Construct the esearch command\n    esearch_command = (\n        f'esearch -db clinvar -query \"{gene_name}[Gene] AND Homo sapiens[Organism]\" |'\n        'efetch -format xml'\n    )\n    try:\n        # Run the esearch command to get the variation IDs\n        esearch_result = subprocess.run(esearch_command, capture_output=True, shell=True, check=True,\n                text=True)",
        "detail": "clinvar_query",
        "documentation": {}
    },
    {
        "label": "fetch_fasta",
        "kind": 2,
        "importPath": "clinvar_query_v1",
        "description": "clinvar_query_v1",
        "peekOfCode": "def fetch_fasta(nucleotide_name: str):\n    esearch_command = (\n        f'efetch -db nucleotide -id {nucleotide_name} -format fasta'\n    )\n    try:\n        # Run the esearch command to get the variation IDs\n        esearch_result = subprocess.run(esearch_command, capture_output=True, shell=True, check=True,\n                text=True)\n        output = esearch_result.stdout\n        # print(output)",
        "detail": "clinvar_query_v1",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "clinvar_query_v1",
        "description": "clinvar_query_v1",
        "peekOfCode": "API_KEY = \"314d1e57cb7a1f3a8e4f6d7a7ec6634e8709\"  # Replace with your actual NCBI API key\nasync def fetch_clinvar_variations(gene_name: str):\n    try:\n        esearch_command = (\n        f'esearch -db clinvar -query \"(({gene_name}[Gene Name]) AND mol cons missense[Filter]) OR (({gene_name}[Gene Name]) AND mol cons nonsense[Filter])\" |'\n        # f'esearch -db clinvar -query \"{gene_name}[Gene] AND Homo sapiens[Organism]\" |'\n        f'efetch -format xml&api_key={API_KEY}'\n        )\n        process = await asyncio.create_subprocess_shell(\n            esearch_command,",
        "detail": "clinvar_query_v1",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n# origins = [\n#     \"http://localhost:5174\" # front-end domain\n# ]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # Or specify [\"http://yourfrontend.com\"]\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "os.environ[\"PATH\"] = os.path.expanduser(\"~\") + \"/edirect:\" + os.environ[\"PATH\"]\n@app.post(\"/run_orffinder/\")\nasync def run_orf(\n    fasta_sequence: Optional[str] = Form(None),\n    file: Optional[UploadFile] = File(None)\n):\n    if not fasta_sequence and not file:\n        raise HTTPException(status_code=400, detail=\"Either 'fasta_sequence' or 'file' is required\")\n    input_filename = f\"input_{uuid4()}.fasta\"\n    output_filename = f\"output_{uuid4()}.txt\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "SeqRequest",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class SeqRequest(BaseModel):\n    fasta_sequence: Optional[str] = None\nclass GeneRequest(BaseModel):\n    gene: str\nclass NucleotideReq(BaseModel):\n    nucleotide: str\nclass DrugInfo(BaseModel):\n    drug: str\n    score: float\nclass DrugRange(BaseModel):",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "GeneRequest",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class GeneRequest(BaseModel):\n    gene: str\nclass NucleotideReq(BaseModel):\n    nucleotide: str\nclass DrugInfo(BaseModel):\n    drug: str\n    score: float\nclass DrugRange(BaseModel):\n    _range: int\nclass DiseaseResponse(BaseModel):",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "NucleotideReq",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class NucleotideReq(BaseModel):\n    nucleotide: str\nclass DrugInfo(BaseModel):\n    drug: str\n    score: float\nclass DrugRange(BaseModel):\n    _range: int\nclass DiseaseResponse(BaseModel):\n    disease_name: str\n    drugs: List[DrugInfo]",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "DrugInfo",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class DrugInfo(BaseModel):\n    drug: str\n    score: float\nclass DrugRange(BaseModel):\n    _range: int\nclass DiseaseResponse(BaseModel):\n    disease_name: str\n    drugs: List[DrugInfo]\nclass RelationReq(str, Enum):\n    auto = 'auto'",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "DrugRange",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class DrugRange(BaseModel):\n    _range: int\nclass DiseaseResponse(BaseModel):\n    disease_name: str\n    drugs: List[DrugInfo]\nclass RelationReq(str, Enum):\n    auto = 'auto'\n    indication = 'indication'\n    contraindication = 'contraindication'\n    off_label = 'off-label use'",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "DiseaseResponse",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class DiseaseResponse(BaseModel):\n    disease_name: str\n    drugs: List[DrugInfo]\nclass RelationReq(str, Enum):\n    auto = 'auto'\n    indication = 'indication'\n    contraindication = 'contraindication'\n    off_label = 'off-label use'\nclass ModeEnum(str, Enum):\n    indication = \"indication\"",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "RelationReq",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class RelationReq(str, Enum):\n    auto = 'auto'\n    indication = 'indication'\n    contraindication = 'contraindication'\n    off_label = 'off-label use'\nclass ModeEnum(str, Enum):\n    indication = \"indication\"\n    contradiction = \"contradiction\"",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ModeEnum",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class ModeEnum(str, Enum):\n    indication = \"indication\"\n    contradiction = \"contradiction\"",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "get_node_id_by_name",
        "kind": 2,
        "importPath": "txgnn_query",
        "description": "txgnn_query",
        "peekOfCode": "def get_node_id_by_name(input_name):\n    df = pd.read_csv('/home/dgx/dgx_irkg_be/TxGNN/data/disease_sorted_nodes.csv', delimiter='\\t', dtype=str)\n    df = df.apply(lambda x: x.str.strip() if x.dtype == \"object\" else x)\n    df['id'] = pd.to_numeric(df['id'], errors='coerce')  # This turns invalid values into NaN\n    df['id'] = df['id'].fillna(0)\n    df['id'] = df['id'].astype(float)\n    match = df[df['node_name'] == input_name]\n    if not match.empty:\n        # Return all node_ids in a list if there are multiple matches\n        return match['id'].tolist()",
        "detail": "txgnn_query",
        "documentation": {}
    },
    {
        "label": "get_node_name",
        "kind": 2,
        "importPath": "txgnn_query",
        "description": "txgnn_query",
        "peekOfCode": "def get_node_name(node_id):\n    df = pd.read_csv('/home/dgx/dgx_irkg_be/TxGNN/data/drug_nodes.csv')\n    result = df[df['node_id'] == node_id]\n    if not result.empty:\n        return result['node_name'].iloc[0]\n    else:\n        return None\ndef txgnn_query(disease_name: List[str], relation: str, _range: int) -> DiseaseResponse:\n    TxD = TxData(data_folder_path='/home/dgx/dgx_irkg_be/TxGNN/data')\n    TxD.prepare_split(split='complex_disease', seed=42)",
        "detail": "txgnn_query",
        "documentation": {}
    },
    {
        "label": "txgnn_query",
        "kind": 2,
        "importPath": "txgnn_query",
        "description": "txgnn_query",
        "peekOfCode": "def txgnn_query(disease_name: List[str], relation: str, _range: int) -> DiseaseResponse:\n    TxD = TxData(data_folder_path='/home/dgx/dgx_irkg_be/TxGNN/data')\n    TxD.prepare_split(split='complex_disease', seed=42)\n    TxG = TxGNN(data=TxD, \n                  weight_bias_track=False,\n                  proj_name='TxGNN',\n                  exp_name='TxGNN',\n                  device='cuda:0'\n                 )\n    TxG.load_pretrained('/home/dgx/dgx_irkg_be/TxGNN/TxGNNExplorer')",
        "detail": "txgnn_query",
        "documentation": {}
    }
]