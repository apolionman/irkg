[
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "fake_users_db",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "fake_users_db",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "fake_users_db",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "UserInDB",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "UserInDB",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "authenticate_user",
        "importPath": "app.core.utils",
        "description": "app.core.utils",
        "isExtraImport": true,
        "detail": "app.core.utils",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "app.core.utils",
        "description": "app.core.utils",
        "isExtraImport": true,
        "detail": "app.core.utils",
        "documentation": {}
    },
    {
        "label": "get_user",
        "importPath": "app.core.utils",
        "description": "app.core.utils",
        "isExtraImport": true,
        "detail": "app.core.utils",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "xml.etree.ElementTree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "fuzz",
        "importPath": "fuzzywuzzy",
        "description": "fuzzywuzzy",
        "isExtraImport": true,
        "detail": "fuzzywuzzy",
        "documentation": {}
    },
    {
        "label": "process",
        "importPath": "fuzzywuzzy",
        "description": "fuzzywuzzy",
        "isExtraImport": true,
        "detail": "fuzzywuzzy",
        "documentation": {}
    },
    {
        "label": "TxData",
        "importPath": "txgnn",
        "description": "txgnn",
        "isExtraImport": true,
        "detail": "txgnn",
        "documentation": {}
    },
    {
        "label": "TxGNN",
        "importPath": "txgnn",
        "description": "txgnn",
        "isExtraImport": true,
        "detail": "txgnn",
        "documentation": {}
    },
    {
        "label": "TxEval",
        "importPath": "txgnn",
        "description": "txgnn",
        "isExtraImport": true,
        "detail": "txgnn",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.schemas.schemas",
        "description": "app.schemas.schemas",
        "isExtraImport": true,
        "detail": "app.schemas.schemas",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.schemas.schemas",
        "description": "app.schemas.schemas",
        "isExtraImport": true,
        "detail": "app.schemas.schemas",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "aiofiles",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiofiles",
        "description": "aiofiles",
        "detail": "aiofiles",
        "documentation": {}
    },
    {
        "label": "run_orffinder",
        "importPath": "app.scripts.ORFfinder",
        "description": "app.scripts.ORFfinder",
        "isExtraImport": true,
        "detail": "app.scripts.ORFfinder",
        "documentation": {}
    },
    {
        "label": "parse_orf_result",
        "importPath": "app.scripts.ORFfinder",
        "description": "app.scripts.ORFfinder",
        "isExtraImport": true,
        "detail": "app.scripts.ORFfinder",
        "documentation": {}
    },
    {
        "label": "fetch_clinvar_variations",
        "importPath": "clinvar_query_v1",
        "description": "clinvar_query_v1",
        "isExtraImport": true,
        "detail": "clinvar_query_v1",
        "documentation": {}
    },
    {
        "label": "fetch_fasta",
        "importPath": "clinvar_query_v1",
        "description": "clinvar_query_v1",
        "isExtraImport": true,
        "detail": "clinvar_query_v1",
        "documentation": {}
    },
    {
        "label": "txgnn_query",
        "importPath": "app.scripts.txgnn_query",
        "description": "app.scripts.txgnn_query",
        "isExtraImport": true,
        "detail": "app.scripts.txgnn_query",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.routes.auth",
        "description": "app.routes.auth",
        "isExtraImport": true,
        "detail": "app.routes.auth",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.core.config",
        "description": "app.core.config",
        "peekOfCode": "SECRET_KEY = os.getenv('SECRET_KEY')\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 60\n# Password hashing configuration\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n# OAuth2 Bearer Token\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n# Mock database (Replace with real database)\nfake_users_db = {\n    \"testuser\": {",
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "app.core.config",
        "description": "app.core.config",
        "peekOfCode": "ALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 60\n# Password hashing configuration\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n# OAuth2 Bearer Token\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n# Mock database (Replace with real database)\nfake_users_db = {\n    \"testuser\": {\n        \"username\": \"admin_dgx\",",
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "app.core.config",
        "description": "app.core.config",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = 60\n# Password hashing configuration\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n# OAuth2 Bearer Token\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n# Mock database (Replace with real database)\nfake_users_db = {\n    \"testuser\": {\n        \"username\": \"admin_dgx\",\n        \"full_name\": \"I am Prepaire DGX\",",
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "app.core.config",
        "description": "app.core.config",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n# OAuth2 Bearer Token\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n# Mock database (Replace with real database)\nfake_users_db = {\n    \"testuser\": {\n        \"username\": \"admin_dgx\",\n        \"full_name\": \"I am Prepaire DGX\",\n        \"email\": \"info@dgx.com\",\n        \"hashed_password\": pwd_context.hash(\"password123\"),",
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "app.core.config",
        "description": "app.core.config",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n# Mock database (Replace with real database)\nfake_users_db = {\n    \"testuser\": {\n        \"username\": \"admin_dgx\",\n        \"full_name\": \"I am Prepaire DGX\",\n        \"email\": \"info@dgx.com\",\n        \"hashed_password\": pwd_context.hash(\"password123\"),\n        \"disabled\": False,\n    }",
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "fake_users_db",
        "kind": 5,
        "importPath": "app.core.config",
        "description": "app.core.config",
        "peekOfCode": "fake_users_db = {\n    \"testuser\": {\n        \"username\": \"admin_dgx\",\n        \"full_name\": \"I am Prepaire DGX\",\n        \"email\": \"info@dgx.com\",\n        \"hashed_password\": pwd_context.hash(\"password123\"),\n        \"disabled\": False,\n    }\n}",
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "app.core.utils",
        "description": "app.core.utils",
        "peekOfCode": "def verify_password(plain_password, hashed_password):\n    \"\"\"Verify if a given password matches the hashed password.\"\"\"\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_user(db, username: str):\n    \"\"\"Retrieve user from the database.\"\"\"\n    user = db.get(username)\n    if user:\n        return UserInDB(**user)\ndef authenticate_user(fake_db, username: str, password: str):\n    \"\"\"Authenticate user by checking username and password.\"\"\"",
        "detail": "app.core.utils",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "app.core.utils",
        "description": "app.core.utils",
        "peekOfCode": "def get_user(db, username: str):\n    \"\"\"Retrieve user from the database.\"\"\"\n    user = db.get(username)\n    if user:\n        return UserInDB(**user)\ndef authenticate_user(fake_db, username: str, password: str):\n    \"\"\"Authenticate user by checking username and password.\"\"\"\n    user = get_user(fake_db, username)\n    if not user or not verify_password(password, user.hashed_password):\n        return False",
        "detail": "app.core.utils",
        "documentation": {}
    },
    {
        "label": "authenticate_user",
        "kind": 2,
        "importPath": "app.core.utils",
        "description": "app.core.utils",
        "peekOfCode": "def authenticate_user(fake_db, username: str, password: str):\n    \"\"\"Authenticate user by checking username and password.\"\"\"\n    user = get_user(fake_db, username)\n    if not user or not verify_password(password, user.hashed_password):\n        return False\n    return user\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    \"\"\"Create a JWT token with an expiration time.\"\"\"\n    to_encode = data.copy()\n    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=15))",
        "detail": "app.core.utils",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "app.core.utils",
        "description": "app.core.utils",
        "peekOfCode": "def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    \"\"\"Create a JWT token with an expiration time.\"\"\"\n    to_encode = data.copy()\n    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=15))\n    to_encode.update({\"exp\": expire})\n    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)",
        "detail": "app.core.utils",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class User(BaseModel):\n    username: str\n    email: Optional[str] = None\n    full_name: Optional[str] = None\n    disabled: Optional[bool] = None\nclass UserInDB(User):\n    hashed_password: str",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "UserInDB",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class UserInDB(User):\n    hashed_password: str",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routes.auth",
        "description": "app.routes.auth",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/token\")\nasync def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):\n    \"\"\"Login route to authenticate users and return an access token.\"\"\"\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},",
        "detail": "app.routes.auth",
        "documentation": {}
    },
    {
        "label": "SeqRequest",
        "kind": 6,
        "importPath": "app.schemas.schemas",
        "description": "app.schemas.schemas",
        "peekOfCode": "class SeqRequest(BaseModel):\n    fasta_sequence: Optional[str] = None\nclass GeneRequest(BaseModel):\n    gene: str\nclass NucleotideReq(BaseModel):\n    nucleotide: str\nclass DrugInfo(BaseModel):\n    drug: str\n    score: float\nclass DrugRange(BaseModel):",
        "detail": "app.schemas.schemas",
        "documentation": {}
    },
    {
        "label": "GeneRequest",
        "kind": 6,
        "importPath": "app.schemas.schemas",
        "description": "app.schemas.schemas",
        "peekOfCode": "class GeneRequest(BaseModel):\n    gene: str\nclass NucleotideReq(BaseModel):\n    nucleotide: str\nclass DrugInfo(BaseModel):\n    drug: str\n    score: float\nclass DrugRange(BaseModel):\n    _range: int\nclass DiseaseResponse(BaseModel):",
        "detail": "app.schemas.schemas",
        "documentation": {}
    },
    {
        "label": "NucleotideReq",
        "kind": 6,
        "importPath": "app.schemas.schemas",
        "description": "app.schemas.schemas",
        "peekOfCode": "class NucleotideReq(BaseModel):\n    nucleotide: str\nclass DrugInfo(BaseModel):\n    drug: str\n    score: float\nclass DrugRange(BaseModel):\n    _range: int\nclass DiseaseResponse(BaseModel):\n    disease_name: str\n    drugs: List[DrugInfo]",
        "detail": "app.schemas.schemas",
        "documentation": {}
    },
    {
        "label": "DrugInfo",
        "kind": 6,
        "importPath": "app.schemas.schemas",
        "description": "app.schemas.schemas",
        "peekOfCode": "class DrugInfo(BaseModel):\n    drug: str\n    score: float\nclass DrugRange(BaseModel):\n    _range: int\nclass DiseaseResponse(BaseModel):\n    disease_name: str\n    drugs: List[DrugInfo]\nclass RelationReq(str, Enum):\n    auto = 'auto'",
        "detail": "app.schemas.schemas",
        "documentation": {}
    },
    {
        "label": "DrugRange",
        "kind": 6,
        "importPath": "app.schemas.schemas",
        "description": "app.schemas.schemas",
        "peekOfCode": "class DrugRange(BaseModel):\n    _range: int\nclass DiseaseResponse(BaseModel):\n    disease_name: str\n    drugs: List[DrugInfo]\nclass RelationReq(str, Enum):\n    auto = 'auto'\n    indication = 'indication'\n    contraindication = 'contraindication'\n    off_label = 'off-label use'",
        "detail": "app.schemas.schemas",
        "documentation": {}
    },
    {
        "label": "DiseaseResponse",
        "kind": 6,
        "importPath": "app.schemas.schemas",
        "description": "app.schemas.schemas",
        "peekOfCode": "class DiseaseResponse(BaseModel):\n    disease_name: str\n    drugs: List[DrugInfo]\nclass RelationReq(str, Enum):\n    auto = 'auto'\n    indication = 'indication'\n    contraindication = 'contraindication'\n    off_label = 'off-label use'\nclass ModeEnum(str, Enum):\n    indication = \"indication\"",
        "detail": "app.schemas.schemas",
        "documentation": {}
    },
    {
        "label": "RelationReq",
        "kind": 6,
        "importPath": "app.schemas.schemas",
        "description": "app.schemas.schemas",
        "peekOfCode": "class RelationReq(str, Enum):\n    auto = 'auto'\n    indication = 'indication'\n    contraindication = 'contraindication'\n    off_label = 'off-label use'\nclass ModeEnum(str, Enum):\n    indication = \"indication\"\n    contradiction = \"contradiction\"",
        "detail": "app.schemas.schemas",
        "documentation": {}
    },
    {
        "label": "ModeEnum",
        "kind": 6,
        "importPath": "app.schemas.schemas",
        "description": "app.schemas.schemas",
        "peekOfCode": "class ModeEnum(str, Enum):\n    indication = \"indication\"\n    contradiction = \"contradiction\"",
        "detail": "app.schemas.schemas",
        "documentation": {}
    },
    {
        "label": "parse_orf_result",
        "kind": 2,
        "importPath": "app.scripts.ORFfinder",
        "description": "app.scripts.ORFfinder",
        "peekOfCode": "def parse_orf_result(output: str):\n    \"\"\"\n    Parses the ORFfinder output into a structured dictionary format.\n    \"\"\"\n    orfs = []\n    lines = output.strip().split(\"\\n\")\n    current_orf = {}\n    sequence = []\n    for line in lines:\n        if line.startswith(\">lcl|\"):",
        "detail": "app.scripts.ORFfinder",
        "documentation": {}
    },
    {
        "label": "run_orffinder",
        "kind": 2,
        "importPath": "app.scripts.ORFfinder",
        "description": "app.scripts.ORFfinder",
        "peekOfCode": "def run_orffinder(input_file: str, output_file: str, minimal_length: int = 75, start_codon: int = 1):\n    \"\"\"\n    This function runs the ORFfinder command-line tool with the given parameters.\n    \"\"\"\n    command = [\n        \"./ORFfinder\", \"-in\", input_file, \"-out\", output_file, \"-ml\", str(minimal_length), \"-s\", str(start_codon)\n    ]\n    try:\n        # Run the ORFfinder command\n        subprocess.run(command, check=True)",
        "detail": "app.scripts.ORFfinder",
        "documentation": {}
    },
    {
        "label": "fetch_clinvar_variations",
        "kind": 2,
        "importPath": "app.scripts.clinvar_query",
        "description": "app.scripts.clinvar_query",
        "peekOfCode": "def fetch_clinvar_variations(gene_name: str):\n    # Construct the esearch command\n    esearch_command = (\n        f'esearch -db clinvar -query \"{gene_name}[Gene] AND Homo sapiens[Organism]\" |'\n        'efetch -format xml'\n    )\n    try:\n        # Run the esearch command to get the variation IDs\n        esearch_result = subprocess.run(esearch_command, capture_output=True, shell=True, check=True,\n                text=True)",
        "detail": "app.scripts.clinvar_query",
        "documentation": {}
    },
    {
        "label": "fetch_fasta",
        "kind": 2,
        "importPath": "app.scripts.clinvar_query_v1",
        "description": "app.scripts.clinvar_query_v1",
        "peekOfCode": "def fetch_fasta(nucleotide_name: str):\n    esearch_command = (\n        f'efetch -db nucleotide -id {nucleotide_name} -format fasta'\n    )\n    try:\n        # Run the esearch command to get the variation IDs\n        esearch_result = subprocess.run(esearch_command, capture_output=True, shell=True, check=True,\n                text=True)\n        output = esearch_result.stdout\n        # print(output)",
        "detail": "app.scripts.clinvar_query_v1",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "app.scripts.clinvar_query_v1",
        "description": "app.scripts.clinvar_query_v1",
        "peekOfCode": "API_KEY = \"314d1e57cb7a1f3a8e4f6d7a7ec6634e8709\"  # Replace with your actual NCBI API key\nasync def fetch_clinvar_variations(gene_name: str):\n    try:\n        esearch_command = (\n        f'esearch -db clinvar -query \"(({gene_name}[Gene Name]) AND mol cons missense[Filter]) OR (({gene_name}[Gene Name]) AND mol cons nonsense[Filter])\" |'\n        # f'esearch -db clinvar -query \"{gene_name}[Gene] AND Homo sapiens[Organism]\" |'\n        f'efetch -format xml&api_key={API_KEY}'\n        )\n        process = await asyncio.create_subprocess_shell(\n            esearch_command,",
        "detail": "app.scripts.clinvar_query_v1",
        "documentation": {}
    },
    {
        "label": "get_node_id_by_name",
        "kind": 2,
        "importPath": "app.scripts.txgnn_query",
        "description": "app.scripts.txgnn_query",
        "peekOfCode": "def get_node_id_by_name(input_name):\n    df = pd.read_csv('/home/dgx/dgx_irkg_be/TxGNN/data/disease_sorted_nodes.csv', delimiter='\\t', dtype=str)\n    df = df.apply(lambda x: x.str.strip() if x.dtype == \"object\" else x)\n    df['id'] = pd.to_numeric(df['id'], errors='coerce')  # This turns invalid values into NaN\n    df['id'] = df['id'].fillna(0)\n    df['id'] = df['id'].astype(float)\n    match = df[df['node_name'] == input_name]\n    if not match.empty:\n        # Return all node_ids in a list if there are multiple matches\n        return match['id'].tolist()",
        "detail": "app.scripts.txgnn_query",
        "documentation": {}
    },
    {
        "label": "get_node_name",
        "kind": 2,
        "importPath": "app.scripts.txgnn_query",
        "description": "app.scripts.txgnn_query",
        "peekOfCode": "def get_node_name(node_id):\n    df = pd.read_csv('/home/dgx/dgx_irkg_be/TxGNN/data/drug_nodes.csv')\n    result = df[df['node_id'] == node_id]\n    if not result.empty:\n        return result['node_name'].iloc[0]\n    else:\n        return None\ndef txgnn_query(disease_name: List[str], relation: str, _range: int) -> DiseaseResponse:\n    TxD = TxData(data_folder_path='/home/dgx/dgx_irkg_be/TxGNN/data')\n    TxD.prepare_split(split='complex_disease', seed=42)",
        "detail": "app.scripts.txgnn_query",
        "documentation": {}
    },
    {
        "label": "txgnn_query",
        "kind": 2,
        "importPath": "app.scripts.txgnn_query",
        "description": "app.scripts.txgnn_query",
        "peekOfCode": "def txgnn_query(disease_name: List[str], relation: str, _range: int) -> DiseaseResponse:\n    TxD = TxData(data_folder_path='/home/dgx/dgx_irkg_be/TxGNN/data')\n    TxD.prepare_split(split='complex_disease', seed=42)\n    TxG = TxGNN(data=TxD, \n                  weight_bias_track=False,\n                  proj_name='TxGNN',\n                  exp_name='TxGNN',\n                  device='cuda:0'\n                 )\n    TxG.load_pretrained('/home/dgx/dgx_irkg_be/TxGNN/TxGNNExplorer')",
        "detail": "app.scripts.txgnn_query",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n# origins = [\n#     \"http://localhost:5174\" # front-end domain\n# ]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # Or specify [\"http://yourfrontend.com\"]\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "os.environ[\"PATH\"] = os.path.expanduser(\"~\") + \"/edirect:\" + os.environ[\"PATH\"]\n# Include authentication routes\napp.include_router(auth_router, prefix=\"/auth\", tags=[\"Authentication\"])\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    \"\"\"Validate JWT token and retrieve current user.\"\"\"\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise HTTPException(status_code=401, detail=\"Invalid token\")",
        "detail": "main",
        "documentation": {}
    }
]